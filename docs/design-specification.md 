## システム設計仕様書 Ver. 2.2

### プロジェクト名： ローカルナレッジエージェント (MVP)

### 1. 概要

#### 1.1. プロジェクト概要

本仕様書は、「ローカルナレッジエージェント (MVP)」アプリケーションのシステム全体に関する設計を定義するものです。本システムは、機密情報を外部に送信することなく、ユーザーのローカルPC内で全ての処理が完結するスタンドアロンのデスクトップアプリケーションです。ユーザーが指定したローカル文書（PDF, TXT）をナレッジベースとし、大規模言語モデル（LLM）を活用して対話形式での情報検索を実現します。

本仕様書は、AIコーディングエージェントによる自動実装を想定しており、アーキテクチャ、データフロー、UI/UX、状態管理など、開発に必要なすべての仕様を網羅しています。

**改訂履歴**
*   Ver. 2.1: AIエージェントの理解を促進するため、情報の構成を再編成。
*   Ver. 2.2: 「主要機能」「ファイル・ディレクトリ構造」のセクションを追加し、構成を最適化。

#### 1.2. 主要機能

本アプリケーションがMVP（Minimum Viable Product）として提供する主要な機能は以下の通りです。

*   **対話形式によるナレッジ検索:** 自然言語での質問に対し、登録された社内文書の内容を基に要約された回答を生成します（RAG機能）。
*   **ローカル完結処理:** 全てのデータ処理（文書のインデックス作成、LLMによる回答生成など）がユーザーのPC内で完結し、機密情報が外部に送信されることはありません。
*   **対象文書の管理:** ユーザーはナレッジベースとして使用するフォルダをGUIから指定できます。
*   **出典の明示:** 生成された回答には、根拠となった文書のファイル名が必ず併記され、情報のトレーサビリティを確保します。
*   **手動インデックス更新:** ユーザーは任意のタイミングで、ナレッジベースのインデックスを最新の状態に更新できます。
*   **処理の中断:** 時間のかかる処理（Q&A応答生成、インデックス作成）をユーザーが任意に中断できる機能を備えます。

---

### 2. システムアーキテクチャ

#### 2.1. アーキテクチャ概要

本システムのアーキテクチャは、UI層、バックエンドロジック層、データストア層、LLM実行環境の4つの主要な層で構成され、全てのコンポーネントはユーザーのローカルPC内で動作します。

*   **UI層 (Frontend):** **Streamlit** を使用し、ユーザーとのインタラクション、状態の表示、バックエンド処理のトリガーを担当します。
*   **バックエンドロジック層 (Backend Logic):** **LangChain** をフレームワークの中心に据え、RAG (検索拡張生成) パイプライン全体の制御を行います。
*   **データストア層 (Data Stores):** 文書ベクトルを管理する **ChromaDB**、永続化設定を保存する **config.json**、そしてアプリケーションの動的な状態を管理する **Streamlit Session State** で構成されます。
*   **LLM実行環境 (LLM Runtime):** **Ollama** を使用し、ローカル環境で大規模言語モデル（LLM）を安全に実行します。

アプリケーションの状態管理は **Streamlit Session State (`st.session_state`)** が中核を担い、UI層とバックエンドロジック層の間の情報連携を司ります。これにより、Streamlitの再実行モデルの中でも状態を維持し、中断処理のような複雑なインタラクションを実現します。

#### 2.2. アーキテクチャ図

```mermaid
graph TD
    subgraph ユーザーPC (ローカル環境)
        subgraph UI層 (Frontend - Streamlit)
            A[ユーザー] <--> UI(メイン画面 / 設定画面);
            UI -- (1) ユーザー操作 (質問/更新/キャンセル) --> SS[st.session_state];
            SS -- (2) 状態をUIに反映 --> UI;
        end

        subgraph バックエンドロジック層 (Backend Logic - LangChain)
            C{アプリケーション制御ロジック};
            SS -- (3) 状態変更をトリガー --> C;
            C -- (4) RAGパイプライン実行 --> RAG;
            RAG(RAGパイプライン<br>Document Loader, Text Splitter, Retriever, Prompting);
            C -- (9) 処理結果/進捗を更新 --> SS;
            C -- (A) ループ内で定期的にチェック --> SS_Cancel[st.session_state<br>cancel_requested];
            SS_Cancel -- (B) Trueの場合 --> C{処理中断};
        end

        subgraph LLM実行環境 (LLM Runtime)
            F[LLM (Ollama)];
        end

        subgraph データストア層 (Data Stores)
            E[ベクトルDB<br>ChromaDB];
            G[文書ファイル<br>PDF, TXT];
            CONF[設定ファイル<br>config.json];
            EM[Embedding Model];
        end

        %% データフロー
        RAG -- (5) 文書読み込み --> G;
        RAG -- (6) チャンクをベクトル化 --> EM;
        EM -- (7) ベクトルとテキストを保存/検索 --> E;
        RAG -- (8) プロンプトを生成し実行 --> F;
        C -- 初期起動/設定変更 --> CONF;
    end
```

#### 2.3. コンポーネント詳細
（内容はVer. 2.1から変更なし）

#### 2.4. データフロー
（内容はVer. 2.1から変更なし）

---

### 3. 画面仕様

#### 3.1. 画面一覧

| 画面ID | 画面名 | 概要 |
| :--- | :--- | :--- |
| SCR-01 | メイン画面 | ユーザーが質問を入力し、AIからの回答と出典を確認する主要画面。 |
| SCR-02 | 設定画面 | ナレッジソースとなるフォルダの指定や、文書インデックスの管理を行う画面。 |

#### 3.2. メイン画面 (SCR-01) 詳細

##### 3.2.1. ワイヤーフレーム

**通常時:**
+-----------------------------------------------------------------+
| ローカルナレッジアシスタント v0.1                                |
+-----------------------------------------------------------------+
| [設定]                                                          |
|-----------------------------------------------------------------|
| ▲                                                               |
| | **あなた:** 在宅勤務の交通費精算について教えて               |
| |                                                               |
| | **アシスタント:** |
| | 在宅勤務の際の交通費は、業務に必要な場合に限り...             |
| | **出典:** - 経費精算規定_ver3.pdf                             |
| |                                                               |
| ▼                                                               |
|-----------------------------------------------------------------|
| > [ここに質問を入力してください]                         [送信] |
+-----------------------------------------------------------------+

**Q&A処理中:**
+-----------------------------------------------------------------+
| ローカルナレッジアシスタント v0.1                                |
+-----------------------------------------------------------------+
| [設定]                                                          |
|-----------------------------------------------------------------|
| ▲                                                               |
| | **あなた:** 在宅勤務の交通費精算について教えて               |
| |                                                               |
| | **アシスタント:** (回答生成中...)                            |
| |                                                               |
| ▼                                                               |
|-----------------------------------------------------------------|
| > [（入力不可）]                                   [キャンセル] |
+-----------------------------------------------------------------+

##### 3.2.2. コンポーネント仕様
（内容はVer. 2.1から変更なし）

---

#### 3.3. 設定画面 (SCR-02) 詳細

##### 3.3.1. ワイヤーフレーム

**通常時:**
+------------------------------------------------------+
| 設定                                         [×]    |
+------------------------------------------------------+
| **ナレッジフォルダ設定** |
| C:\Users\YourName\Documents\社内規定         [変更]  |
|------------------------------------------------------|
| **インデックス** |
| 最終更新: 2025/08/30 10:00                          |
|                                        [今すぐ更新]  |
|------------------------------------------------------|
|                                              [閉じる]|
+------------------------------------------------------+

**インデックス作成処理中:**
+------------------------------------------------------+
| 設定                                         [×]    |
+------------------------------------------------------+
| **ナレッジフォルダ設定** |
| C:\Users\YourName\Documents\社内規定         [変更]  |
|------------------------------------------------------|
| **インデックス** |
| 処理中... (5/50 ファイル完了)                        |
| [■■■■■□□□□□□□□□□□□□□□] [キャンセル]             |
|------------------------------------------------------|
|                                              [閉じる]|
+------------------------------------------------------+

##### 3.3.2. コンポーネント仕様
（内容はVer. 2.1から変更なし）

---

### 4. 共通仕様

| 項目 | 仕様 |
| :--- | :--- |
| **状態管理** | アプリケーションの状態は `st.session_state` で一元管理する。<br>・`st.session_state['app_state']`: アプリケーションの主要な状態 (`'idle'`, `'processing_qa'`, `'processing_indexing'`)<br>・`st.session_state['cancel_requested']`: 中断要求の有無 (`True` / `False`)<br>・`st.session_state['chat_history']`: 対話履歴のリスト<br>・`st.session_state['config']`: ナレッジフォルダパスや最終更新日時などの設定情報 |
| **処理の中断メカニズム** | ・長時間処理（Q&A、インデックス作成）のループ内部で、定期的に `st.session_state['cancel_requested']` をチェックする。<br>・フラグが `True` の場合、ループを `break` し、処理を安全に終了する。<br>・中断後、チャット履歴や設定画面に「処理が中断されました」というメッセージを表示し、`app_state` を `'idle'` に、`cancel_requested` を `False` に戻す。 |
| **パフォーマンス目標** | ・**目標値:** ユーザーが質問を送信してから、回答が画面に表示されるまでの時間は**30秒以内**を目標とする（ベストエフォート）。<br>・**測定方法:** 質問送信時と回答表示完了時にタイムスタンプ (`datetime.now()`) を取得し、その差分をコンソールログに出力する機能を実装する。「`[PERF] Response time: X.XX seconds`」の形式で出力すること。 |
| **永続化** | ・ナレッジフォルダのパス、インデックスの最終更新日時などの設定情報は、`st.session_state['config']` の内容と同期させ、変更があるたびにローカルの `config.json` ファイルに保存する。<br>・チャット履歴は、アプリケーション実行中のセッション内 (`st.session_state['chat_history']`) でのみ保持する。 |
| **UIフィードバック** | ・**ロード中:** 時間のかかる処理の実行中は、ユーザーに処理中であることが分かるようにインジケータ（プログレスバーやスピナー）を表示する (`st.spinner`, `st.progress`)。<br>・**エラー:** ファイル読み込み失敗、LLM応答エラー等の場合は、その内容をユーザーに分かりやすく通知する (`st.error`)。<br>・**情報:** 処理に関する注意喚起や補足情報（例: フォルダ変更後のインデックス更新推奨）を表示する (`st.warning`, `st.info`)。 |

---

### 5. 実装詳細

#### 5.1. ファイル・ディレクトリ構造

本アプリケーションの実装は、以下のファイルおよびディレクトリ構造に従うこと。これにより、責務の分離とコードの可読性を確保する。

```
local-knowledge-agent/
│
├── .streamlit/
│   └── config.toml           # Streamlitのテーマや設定（オプション）
│
├── data/
│   ├── chroma_db/            # ChromaDBの永続化データが保存されるディレクトリ
│   └── config.json           # ナレッジフォルダパス等の設定を保存するファイル
│
├── src/
│   ├── __init__.py
│   ├── logic/
│   │   ├── __init__.py
│   │   ├── indexing.py       # ドキュメントの読み込み、分割、インデックス作成ロジック
│   │   └── qa.py             # Q&Aパイプラインの構築と実行ロジック
│   │
│   └── ui/
│       ├── __init__.py
│       ├── main_view.py      # メイン画面(SCR-01)のUIコンポーネントとロジック
│       └── settings_view.py  # 設定画面(SCR-02)のUIコンポーネントとロジック
│
├── app.py                    # Streamlitアプリケーションのエントリーポイント
├── requirements.txt          # 依存ライブラリ一覧
└── README.md                 # プロジェクトの説明書
```

**各ファイル/ディレクトリの責務:**
*   `app.py`: アプリケーションの起動、`st.session_state` の初期化、UIモジュール（`main_view`, `settings_view`）の呼び出しなど、全体的な制御を行う。
*   `src/logic/indexing.py`: ファイルの読み込み、チャンクへの分割、ベクトル化、ChromaDBへの保存といった、インデックス作成に関連する全てのバックエンド処理をカプセル化する。
*   `src/logic/qa.py`: ベクトルDBからの文書検索、プロンプトの構築、Ollamaへの問い合わせといった、Q&A応答生成に関連する全てのバックエンド処理をカプセル化する。
*   `src/ui/main_view.py`: メイン画面のUIレイアウトと、ユーザー操作に応じたバックエンドロジック（`qa.py`）の呼び出しを担当する。
*   `src/ui/settings_view.py`: 設定画面のUIレイアウトと、ユーザー操作に応じたバックエンドロジック（`indexing.py`）の呼び出しを担当する。
*   `data/`: ユーザーデータや設定など、アプリケーションが実行中に生成・利用する全ての永続化データを格納する。このディレクトリはGitの管理対象外（`.gitignore`に記載）とすることが望ましい。
